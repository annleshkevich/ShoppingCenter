// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shopping_center;

#nullable disable

namespace Shopping_center.Migrations
{
    [DbContext(typeof(ShoppingCenterContext))]
    [Migration("20220720221504_AddPropertyPopulation")]
    partial class AddPropertyPopulation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CompanySupplier", b =>
                {
                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.HasKey("CompaniesId", "SuppliersId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("CompanySupplier");
                });

            modelBuilder.Entity("ManufacturerSupplier", b =>
                {
                    b.Property<int>("ManufacturersId")
                        .HasColumnType("int");

                    b.Property<int>("SuppliersId")
                        .HasColumnType("int");

                    b.HasKey("ManufacturersId", "SuppliersId");

                    b.HasIndex("SuppliersId");

                    b.ToTable("ManufacturerSupplier");
                });

            modelBuilder.Entity("Shopping_center.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Shopping_center.Entities.Company", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShoppingCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Сompanies");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Company");
                });

            modelBuilder.Entity("Shopping_center.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Shopping_center.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Shopping_center.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Shopping_center.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shopping_center.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Shopping_center.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CafeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CafeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Shopping_center.Entities.ShoppingCenter", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("ShoppingCenters");
                });

            modelBuilder.Entity("Shopping_center.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Shopping_center.Entities.Cafe", b =>
                {
                    b.HasBaseType("Shopping_center.Entities.Company");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShoppingCenterId");

                    b.HasDiscriminator().HasValue("Cafe");
                });

            modelBuilder.Entity("Shopping_center.Entities.Client", b =>
                {
                    b.HasBaseType("Shopping_center.Entities.Person");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("Client_CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Shopping_center.Entities.Employee", b =>
                {
                    b.HasBaseType("Shopping_center.Entities.Person");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Shopping_center.Entities.Manufacturer", b =>
                {
                    b.HasBaseType("Shopping_center.Entities.Person");

                    b.HasDiscriminator().HasValue("Manufacturer");
                });

            modelBuilder.Entity("Shopping_center.Entities.Shop", b =>
                {
                    b.HasBaseType("Shopping_center.Entities.Company");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("Shop_ClientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ShoppingCenterId");

                    b.HasDiscriminator().HasValue("Shop");
                });

            modelBuilder.Entity("CompanySupplier", b =>
                {
                    b.HasOne("Shopping_center.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping_center.Entities.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ManufacturerSupplier", b =>
                {
                    b.HasOne("Shopping_center.Entities.Manufacturer", null)
                        .WithMany()
                        .HasForeignKey("ManufacturersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping_center.Entities.Supplier", null)
                        .WithMany()
                        .HasForeignKey("SuppliersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shopping_center.Entities.City", b =>
                {
                    b.HasOne("Shopping_center.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Shopping_center.Entities.Product", b =>
                {
                    b.HasOne("Shopping_center.Entities.Manufacturer", null)
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Shopping_center.Entities.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping_center.Entities.Shop", "Shop")
                        .WithMany("Products")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("Shopping_center.Entities.Service", b =>
                {
                    b.HasOne("Shopping_center.Entities.Cafe", "Cafe")
                        .WithMany("Services")
                        .HasForeignKey("CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cafe");
                });

            modelBuilder.Entity("Shopping_center.Entities.ShoppingCenter", b =>
                {
                    b.HasOne("Shopping_center.Entities.City", "City")
                        .WithMany("ShoppingCenters")
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Shopping_center.Entities.Cafe", b =>
                {
                    b.HasOne("Shopping_center.Entities.Client", null)
                        .WithMany("Cafes")
                        .HasForeignKey("ClientId");

                    b.HasOne("Shopping_center.Entities.ShoppingCenter", "ShoppingCenter")
                        .WithMany("Cafes")
                        .HasForeignKey("ShoppingCenterId");

                    b.Navigation("ShoppingCenter");
                });

            modelBuilder.Entity("Shopping_center.Entities.Client", b =>
                {
                    b.HasOne("Shopping_center.Entities.Company", null)
                        .WithMany("Clients")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Shopping_center.Entities.Employee", b =>
                {
                    b.HasOne("Shopping_center.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shopping_center.Entities.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Shopping_center.Entities.Shop", b =>
                {
                    b.HasOne("Shopping_center.Entities.Client", null)
                        .WithMany("Shops")
                        .HasForeignKey("ClientId");

                    b.HasOne("Shopping_center.Entities.ShoppingCenter", "ShoppingCenter")
                        .WithMany("Shops")
                        .HasForeignKey("ShoppingCenterId");

                    b.Navigation("ShoppingCenter");
                });

            modelBuilder.Entity("Shopping_center.Entities.City", b =>
                {
                    b.Navigation("ShoppingCenters");
                });

            modelBuilder.Entity("Shopping_center.Entities.Company", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Shopping_center.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Shopping_center.Entities.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Shopping_center.Entities.ShoppingCenter", b =>
                {
                    b.Navigation("Cafes");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("Shopping_center.Entities.Cafe", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Shopping_center.Entities.Client", b =>
                {
                    b.Navigation("Cafes");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("Shopping_center.Entities.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shopping_center.Entities.Shop", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
